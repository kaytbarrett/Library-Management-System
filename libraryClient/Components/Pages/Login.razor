@page "/login"
@inject HttpClient HttpClient
@inject libraryClient.Components.Services.IAuthenticationService AuthenticationService
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@using System.Text;
@using System.Text.Json;
@using System.Net.Http.Headers;
@using System.Net;
@using System.ComponentModel.DataAnnotations

<article style="display: flex; justify-content: center;">
<div class="card text-bg-light mb-3" style="max-width: 18rem;">
  <div class="card-header" style="font-size: 20px;">Login</div>

  <div class="card-body">
<div>
    <EditForm Model="@loginModel" FormName="LoginForm" OnSubmit="HandleSubmit">
    <DataAnnotationsValidator />

    <div>
        <label for="username">Username:</label>
        <InputText id="username" @bind-Value="loginModel.Username" />
        <ValidationMessage For="@(() => loginModel.Username)" />
    </div>

    <div>
        <label for="password">Password:</label>
        <InputText id="password" @bind-Value="loginModel.Password" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>

    <button class="btn btn-secondary" style="margin-top: 1rem;" type="submit" value="Submit">Login</button>
    </EditForm>
</div>
</div>
</div>
</article>



@code {
    private string? csrfToken;
    private int? userId;
    private LoginModel loginModel = new LoginModel();
    

    protected override async Task OnInitializedAsync()
    {
        // Call the method to get the CSRF token when the component is initialized
        await GetCsrfToken();
    }

    private async Task GetCsrfToken()
    {
        try
        {
            // Create an HttpClient instance with CookieContainer to handle cookies
            var handler = new HttpClientHandler();
            handler.UseCookies = true;
            handler.CookieContainer = new CookieContainer();
            var httpClient = new HttpClient(handler);

            // Make a GET request to obtain the CSRF token
            var response = await httpClient.GetAsync("http://127.0.0.1:8000/api/login/");
            response.EnsureSuccessStatusCode();

            // Extract the CSRF token from the JSON response body
            var responseBody = await response.Content.ReadAsStringAsync();
            responseBody = responseBody.Trim();
            Console.WriteLine($"Response Body: {responseBody}"); // Print the response body for debugging

            try
            {
                using (JsonDocument document = JsonDocument.Parse(responseBody))
                {
                    var root = document.RootElement;

                    if (root.TryGetProperty("csrf_token", out var tokenElement) && tokenElement.ValueKind == JsonValueKind.String)
                    {
                        csrfToken = tokenElement.GetString();
                        Console.WriteLine($"CSRF Token: {csrfToken}");
                    }
                    else
                    {
                        Console.WriteLine("CSRF token not found or not a string in JSON response.");
                    }
                }
            }
            catch (JsonException ex)
            {
                Console.WriteLine($"Error parsing JSON: {ex.Message}");
            }
        }
        catch (Exception ex)
        {
            // Handle error (show message, log, etc.)
            Console.WriteLine($"Error getting CSRF token: {ex.Message}");
        }
    }

     private class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string? Username { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string? Password { get; set; }
    }

    private async Task HandleSubmit()
    {
        Console.WriteLine($"HandleSubmit called! Username: {loginModel.Username}, Password: {loginModel.Password}");

        try
        {
            // Prepare the request payload as form data
            var requestData = new Dictionary<string, string>
            {
                { "username", loginModel.Username },
                { "password", loginModel.Password }
            };

            var requestContent = new FormUrlEncodedContent(requestData);

            // Print request payload for debugging
            Console.WriteLine($"Request Payload: {await requestContent.ReadAsStringAsync()}");

            // Make a POST request
            using (var httpClient = new HttpClient())
            {
                // Add the CSRF token to the headers
                httpClient.DefaultRequestHeaders.Clear();
                httpClient.DefaultRequestHeaders.Add("X-CSRFToken", csrfToken);

                Console.WriteLine($"CSRF Token for POST request: {csrfToken}");

                var response = await httpClient.PostAsync("http://127.0.0.1:8000/api/login/", requestContent);
                response.EnsureSuccessStatusCode();

                // Parse and handle the login response appropriately
                var responseData = await response.Content.ReadFromJsonAsync<ApiResponse>();

                if (responseData.Success)
                {
                    AuthenticationService.SetToken(responseData.Token);
                    userId = responseData.UserId; // Set the user ID for further use
                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    // Failed login, handle accordingly (show error message, etc.)
                    Console.WriteLine($"Login failed: {responseData.ErrorMessage}");
                }
            }
        }
        catch (Exception ex)
        {
            // Handle error (show message, log, etc.)
            Console.WriteLine($"Error handling login: {ex.Message}");
        }
    }


    private class ApiResponse
    {
        public bool Success { get; set; }
        public string? Token { get; set; }
        public int? UserId { get; set; }
        public string? ErrorMessage { get; set; }
        public string? CsrfToken { get; set; }
        // Other properties based on your API response
    }


   
}
